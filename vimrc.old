"-----------------------------------------------------------------------
" Vim settings file for Ciaran McCreesh <ciaranm at gentoo.org>
"
" I finally added some comments, so you can have some vague idea of
" what all this does.
"
" Most recent update: Sun 02 Jul 2006 21:39:04 CEST
"
" Get the latest version from:
"     http://dev.gentoo.org/~ciaranm/configs/vimrc
"
" Don't just blindly copy this vimrc. There's some rather idiosyncratic
" stuff in here...
"
"-----------------------------------------------------------------------

"-----------------------------------------------------------------------
" terminal setup
"-----------------------------------------------------------------------

" Extra terminal things
if ($TERM == "rxvt-unicode") && (&termencoding == "")
    set termencoding=utf-8
endif

"-----------------------------------------------------------------------
" settings
"-----------------------------------------------------------------------

" Don't be compatible with vi
set nocompatible

" Enable a nice big viminfo file
set viminfo='1000,f1,:1000,/1000

" Make backspace delete lots of things
set backspace=indent,eol,start

" Create backups
"set backup

" Show line numbers
set number

" Show us the command we're typing
set showcmd

" Highlight matching parens
set showmatch

" Search options: incremental search, do clever case things, highlight
" search
set incsearch
set ignorecase
set infercase
set hlsearch
set encoding=utf-8

" Show full tags when doing search completion
set showfulltag

" Speed up macros
set lazyredraw

" No annoying error noises
set noerrorbells
set visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" Try to show at least three lines and two columns of context when
" scrolling
set scrolloff=3
set sidescrolloff=2

" Wrap on these
set whichwrap+=<,>,[,]

" Use the cool tab complete menu
set wildmenu
set wildignore=*.o,*~

" Allow edit buffers to be hidden
set hidden

" 1 height windows
set winminheight=1

" Enable syntax highlighting
syntax on

" Set our fonts
"if has("gui_kde")
"    set guifont=Terminus/12/-1/5/50/0/0/0/0/0
"elseif has("gui_gtk")
"    set guifont=Terminus\ 12
"elseif has("gui_running")
"    set guifont=-xos4-terminus-medium-r-normal--14-140-72-72-c-80-iso8859-1
"endif
set guifont=Bitstream\ Vera\ Sans\ Mono\ Bold\ 11

" Try to load a nice colourscheme
fun! LoadColourScheme(schemes)
    let l:schemes = a:schemes . ":"
    while l:schemes != ""
        let l:scheme = strpart(l:schemes, 0, stridx(l:schemes, ":"))
        let l:schemes = strpart(l:schemes, stridx(l:schemes, ":") + 1)
        try
            exec "colorscheme" l:scheme
            break
        catch
        endtry
    endwhile
endfun

if has('gui')
    call LoadColourScheme("dante:putty:midnight2:inkpot:night:rainbow_night:darkblue:elflord")
else
    if &t_Co == 88 || &t_Co == 256
        call LoadColourScheme("dante:putty:midnight2:inkpot:darkblue:elflord")
    else
        call LoadColourScheme("dante:putty:midnight2:darkblue:elflord")
    endif
endif

" No icky toolbar, menu or scrollbars in the GUI
if has('gui')
    "set guioptions-=m
    set guioptions-=T
    "set guioptions-=l
    "set guioptions-=L
    "set guioptions-=r
    "set guioptions-=R
end

" By default, go for an indent of 4
set shiftwidth=4
set ts=4 " 1 tabs equals 4 spaces
set nosta " Don't insert spaces when <tab> is press
set noet " Don't expand tabs to spaces

" Do clever indent things.
set autoindent
set smartindent
" Don't make a # force column zero.
inoremap # X<BS>#

" Don't remove indent even if I don't write anything on that line.
imap <CR> <CR> <BS>

" Highlight whitespace
set listchars=eol:↓,tab:»\ ,trail:.,extends:…
set list

" Enable folds
set foldenable
set foldmethod=indent
set foldlevel=0
set foldcolumn=0

" Syntax when printing
set popt+=syntax:y

" Enable filetype settings
filetype on
filetype plugin on
" filetype indent on
filetype plugin indent on

" Enable modelines only on secure vim versions
if (v:version == 603 && has("patch045")) || (v:version > 603)
    set modeline
else
    set nomodeline
endif

" Nice statusbar
set laststatus=2
set statusline=
set statusline+=%-3.3n\                      " buffer number
set statusline+=%f\                          " file name
set statusline+=%h%m%r%w                     " flags
set statusline+=\[%{strlen(&ft)?&ft:'none'}, " filetype
set statusline+=%{&encoding},                " encoding
set statusline+=%{&fileformat}]              " file format
if filereadable(expand("$VIM/vimfiles/plugin/vimbuddy.vim"))
    set statusline+=\ %{VimBuddy()}          " vim buddy
endif
set statusline+=%=                           " right align
set statusline+=0x%-8B\                      " current char
set statusline+=%-14.(%l,%c%V%)\ %<%P        " offset

" If possible, try to use a narrow number column.
if v:version >= 700
    try
        setlocal numberwidth=3
    catch
    endtry
endif

" Include $HOME in cdpath
let &cdpath=','.expand("$HOME")

set fillchars=fold:-

"-----------------------------------------------------------------------
" completion
"-----------------------------------------------------------------------
set dictionary=/usr/share/dict/words

"-----------------------------------------------------------------------
" mappings
"-----------------------------------------------------------------------

" Find a buffer with the given number (ordering is such that the first
" entry shown in minibufexpl is 1, the second is 2 and so on). If
" there's already a window open for that buffer, switch to it. Otherwise
" switch the current window to use that buffer.
fun! <SID>SelectBuffer(wantedbufnum)
    let l:buflast = bufnr("$")
    let l:bufidx = 0
    let l:goodbufcount = 0
    while (l:bufidx < l:buflast)
        let l:bufidx = l:bufidx + 1
        if buflisted(l:bufidx)
            let l:bufname = bufname(l:bufidx)
            if (strlen(l:bufname)) &&
                        \ getbufvar(l:bufidx, "&modifiable") == 1 &&
                        \ l:bufname != '-MiniBufExplorer-'
                let l:goodbufcount = l:goodbufcount + 1
                if l:goodbufcount == a:wantedbufnum
                    let l:winnr = bufwinnr(l:bufidx)
                    if l:winnr > -1
                        execute l:winnr . "wincmd w"
                    else
                        execute "buffer " . l:bufidx
                    endif
                    break
                endif
            endif
        endif
    endwhile
endfun

" Buffer switches
nmap   <silent> <M-1>   :call <SID>SelectBuffer( 1)<CR>
nmap   <silent> <M-2>   :call <SID>SelectBuffer( 2)<CR>
nmap   <silent> <M-3>   :call <SID>SelectBuffer( 3)<CR>
nmap   <silent> <M-4>   :call <SID>SelectBuffer( 4)<CR>
nmap   <silent> <M-5>   :call <SID>SelectBuffer( 5)<CR>
nmap   <silent> <M-6>   :call <SID>SelectBuffer( 6)<CR>
nmap   <silent> <M-7>   :call <SID>SelectBuffer( 7)<CR>
nmap   <silent> <M-8>   :call <SID>SelectBuffer( 8)<CR>
nmap   <silent> <M-9>   :call <SID>SelectBuffer( 9)<CR>
nmap   <silent> <M-0>   :call <SID>SelectBuffer(10)<CR>
nmap   <silent> <S-Left>   :bprev<CR>
nmap   <silent> <S-Right>  :bnext<CR>

" Delete a buffer but keep layout
command! Kwbd enew|bw #

" Annoying default mappings
inoremap <S-Up>   <C-o>gk
inoremap <S-Down> <C-o>gj
noremap  <S-Up>   gk
noremap  <S-Down> gj

" Make <space> in normal mode go down a page rather than left a
" character
noremap <space> <C-f>

" Useful things from inside imode
inoremap <C-z>w <C-o>:w<CR>
inoremap <C-z>q <C-o>gq}<C-o>k<C-o>$

" Commonly used commands
nmap <silent> <F3> :silent nohlsearch<CR>
imap <silent> <F3> <C-o>:silent nohlsearch<CR>
nmap <F5> <C-w>c
nmap <F4> :Kwbd<CR>
nmap <F7> :so %<CR>
nmap <F8> :make<CR>
nmap <F11> <C-]>
nmap <F12> :pop<CR>

" Insert a single char
noremap <Leader>i i<Space><Esc>r

" Split the line
nmap <Leader>n \i<CR>

" Pull the following line to the cursor position
noremap <Leader>J :s/\%#\(.*\)\n\(.*\)/\2\1<CR>

" In normal mode, jj escapes
inoremap jj <Esc>

" Select everything
noremap <Leader>gg ggVG

" Reformat everything
noremap <Leader>gq gggqG

" Reformat paragraph
noremap <Leader>gp gqap

" Clear lines
noremap <Leader>clr :s/^.*$//<CR>:nohls<CR>

" Delete blank lines
noremap <Leader>dbl :g/^$/d<CR>:nohls<CR>

" Enclose each selected line with markers
noremap <Leader>enc :<C-w>execute
            \ substitute(":'<,'>s/^.*/#&#/ \| :nohls", "#", input(">"), "g")<CR>

" Enable fancy % matching
runtime! macros/matchit.vim

" q: sucks
nmap q: :q

" set up some more useful digraphs
digraph ., 8230    " ellipsis (…)

"-----------------------------------------------------------------------
" special less.sh and man modes
"-----------------------------------------------------------------------

fun! <SID>is_pager_mode()
    let l:ppidc = ""
    try
        let l:ppid = libcallnr("/lib/libc.so.6", "getppid", "")
        let l:ppidc = system("ps -p " . l:ppid . " -o comm=")
        let l:ppidc = substitute(l:ppidc, "\\n", "", "g")
    catch
    endtry
    return l:ppidc ==# "less.sh" ||
                \ l:ppidc ==# "vimpager" ||
                \ l:ppidc ==# "manpager.sh" ||
                \ l:ppidc ==# "vimmanpager"
endfun
if <SID>is_pager_mode()
    " we're in vimpager / less.sh / man mode
    set laststatus=0
    set ruler
    set foldmethod=manual
    set foldlevel=99
    set nolist
endif

"-----------------------------------------------------------------------
" plugin / script / app settings
"-----------------------------------------------------------------------

" Settings for taglist.vim
let Tlist_Use_Right_Window=1
let Tlist_Auto_Open=0
let Tlist_Enable_Fold_Column=0
let Tlist_Compact_Format=1
let Tlist_WinWidth=28
let Tlist_Exit_OnlyWindow=1
let Tlist_File_Fold_Auto_Close = 1
nnoremap <silent> <F9> :Tlist<CR>

" Settings minibufexpl.vim
let g:miniBufExplModSelTarget = 1
au BufEnter *MiniBufExpl* setlocal winfixheight

" Settings for showmarks.vim
let g:showmarks_enable=1
autocmd VimEnter *
            \ if has('gui') |
            \        highlight ShowMarksHLl gui=bold guifg=#a0a0e0 guibg=#2e2e2e |
            \        highlight ShowMarksHLu gui=none guifg=#a0a0e0 guibg=#2e2e2e |
            \        highlight ShowMarksHLo gui=none guifg=#a0a0e0 guibg=#2e2e2e |
            \        highlight ShowMarksHLm gui=none guifg=#a0a0e0 guibg=#2e2e2e |
            \        highlight SignColumn   gui=none guifg=#f0f0f8 guibg=#2e2e2e |
            \    endif

" Settings for explorer.vim
let g:explHideFiles='^\.'

" Settings for netrw
let g:netrw_list_hide='^\.,\~$'

" Settings for :TOhtml
let html_number_lines=1
let html_use_css=1
let html_use_encoding="utf-8"
let use_xhtml=0

" Settings for pylint.vim
autocmd FileType python compiler pylint
autocmd BufReadPost quickfix map <buffer> <silent> <CR> :.cc <CR> :ccl

if has( "eval" ) && has( "autocmd" )
	fun! <SID>abbrev_cpp()
		iabbrev <buffer> jci const_iterator
		iabbrev <buffer> jcl class
		iabbrev <buffer> jco const
		iabbrev <buffer> jdg \ingroup
		iabbrev <buffer> jdx /**<CR><CR>/<Up>
		iabbrev <buffer> jit iterator
		iabbrev <buffer> jns namespace
		iabbrev <buffer> jpr protected
		iabbrev <buffer> jpu public
		iabbrev <buffer> jpv private
		iabbrev <buffer> jsl std::list
		iabbrev <buffer> jsm std::map
		iabbrev <buffer> jss std::string
		iabbrev <buffer> jsv std::vector
		iabbrev <buffer> jty typedef
		iabbrev <buffer> jun using namespace
		iabbrev <buffer> jvi virtual
	endfun
	
	augroup abbreviations
		autocmd!
		autocmd FileType cpp :call <SID>abbrev_cpp()
	augroup end
	augroup mkd
		autocmd BufRead *.mkd set ai formatoptions=tcroqn2 comments=n:>
	augroup END
endif

" cscope settings
if has('cscope') && filereadable("/usr/bin/cscope")
    set csto=0
    set cscopetag
    set nocsverb
    if filereadable("cscope.out")
        cs add cscope.out
    endif
    set csverb

    let x = "sgctefd"
    while x != ""
        let y = strpart(x, 0, 1) | let x = strpart(x, 1)
        exec "nmap <C-j>" . y . " :cscope find " . y .
                    \ " <C-R>=expand(\"\<cword\>\")<CR><CR>"
        exec "nmap <C-j><C-j>" . y . " :scscope find " . y .
                    \ " <C-R>=expand(\"\<cword\>\")<CR><CR>"
    endwhile
    nmap <C-j>i      :cscope find i ^<C-R>=expand("<cword>")<CR><CR>
    nmap <C-j><C-j>i :scscope find i ^<C-R>=expand("<cword>")<CR><CR>
endif

"-----------------------------------------------------------------------
" final commands
"-----------------------------------------------------------------------

" turn off any existing search
au VimEnter * nohls
